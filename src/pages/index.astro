---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/navbar.astro";
import Footer from "../components/footer.astro";
---

<Layout title="Gaxve Music">
  <main>
    <div class="content">
      <div class="image-container">
        <img src="/media/Background.png" alt="Image" />
      </div>
      <div class="hero-content">
        <Navbar />
        <div class="music-content">
          <h1>Gaxve</h1>
          <div class="buttons-container">
            <button id="latest-btn" class="active">LATEST</button>
            <button id="highlighted-btn">HIGHLIGHTED</button>
          </div>

          <div class="player-section">
            <div class="music-player-container">
              <div class="music-sections">
                <section id="latest-section" class="music-section active">
                  <h2>LATEST SONGS</h2>
                  <div id="tracksListLatest"></div>
                </section>

                <section id="highlighted-section" class="music-section">
                  <h2>HIGHLIGHTED SONGS</h2>
                  <div id="tracksListHighlighted"></div>
                </section>
              </div>

              <div
                class="audio-container"
                style="margin-top: 20px; margin-bottom: 20px; max-width: 18rem;"
              >
                <div class="coverArt">
                  <img id="coverArtImage" src="/media/cover_album.png" />
                </div>
                <audio id="audioPlayer" controls>
                  Your browser does not support the audio element.
                </audio>
              </div>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    </div>
  </main>

  <style>
    .content {
      display: flex;
      height: 100vh;
    }

    .audio-container {
      margin-top: 0;
      margin-bottom: 0;
      max-width: 18rem;
      width: 100%; /* Add this line to make the container full width */
    }

    .coverArt {
      width: 100%; /* Set width to 100% */
      height: auto;
      overflow: hidden;
      position: relative;
    }

    #coverArtImage {
      width: 100%; /* Set width to 100% */
      height: auto;
    }

    #audioPlayer {
      width: 100%; /* Set width to 100% */
    }

    .image-container {
      flex: 0 0 40%;
      max-width: 40%;
      height: 100%;
      overflow: hidden;
    }

    .image-container img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .hero-content {
      color: #eeeeee;
      padding: 0;
      position: relative;
      z-index: 1;
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    h1 {
      color: #eeeeee;
      font-size: 8rem;
      font-weight: 500;
      line-height: 1;
      text-align: left;
      margin: 0;
    }

    .header-navbar {
      position: sticky;
      top: 0;
      background-color: #070707;
      padding: 2rem;
      padding-inline: 5rem;
      z-index: 2;
      box-shadow: 0px 2px 0px rgba(174, 202, 205, 0.5);
    }

    .header-navbar ul {
      list-style-type: none;
      margin: 0;
      padding: 0;
      display: flex;
    }

    .header-navbar ul li {
      margin: 0 10px;
    }

    .header-navbar ul li a {
      text-decoration: none;
      color: #fff;
      font-weight: bold;
    }

    .buttons-container {
      margin-top: 20px;
    }

    .buttons-container button {
      padding: 10px 20px;
      margin-right: 10px;
      border: none;
      background-color: transparent;
      color: #fff;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      text-align: left;
    }

    .buttons-container button::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 50%;
      width: 0;
      height: 2px;
      background-color: #76abae;
      transition:
        width 0.3s ease,
        left 0.3s ease;
    }

    .buttons-container button.active::after {
      width: calc(100% - 40px);
      left: 20px;
    }

    .sections {
      margin-top: 20px;
      padding: 10px 20px;
    }

    .music-section {
      display: none;
    }

    .music-section.active {
      display: block;
    }

    .music-content {
      padding: 3rem;
      padding-inline: 5rem;
      padding-bottom: 0;
      margin-bottom: 0;
    }

    .player-section {
      display: flex;
      padding: 1.2rem;
    }

    .music-player-container {
      display: flex;
      flex-direction: column;
      flex: 1;
    }

    .music-sections {
      flex: 1;
    }

    .coverArt {
      max-width: 100%;
      height: auto;
      overflow: hidden;
      position: relative;
    }

    #coverArtImage {
      width: 100%;
      height: auto;
    }

    /* For screens smaller than 768px (typical mobile phones) */
    @media only screen and (max-width: 1399px) {
      h1 {
        font-size: 6rem;
      }
      .content {
        flex-direction: column;
      }

      .image-container {
        flex: 0 0 auto;
        max-width: 100%;
        height: auto;
        order: -1;
      }

      .hero-content {
        order: 1;
      }

      .header-navbar {
        padding-inline: 2rem;
      }

      .music-content {
        padding: 3rem 2rem;
      }

      .player-section {
        padding: 1.2rem 1.2rem;
        flex-direction: column;
      }

      #coverArtImage {
        max-width: 100%;
        height: auto;
      }
    }

    /* For screens larger than 768px */
    @media only screen and (min-width: 1400px) {
      .content {
        flex-direction: row;
      }

      .image-container {
        flex: 0 0 40%;
        max-width: 40%;
        order: 0;
      }

      .hero-content {
        order: 1;
      }

      .header-navbar {
        padding-inline: 5rem;
      }

      .music-content {
        padding: 3rem 5rem;
      }

      .player-section {
        padding: 1.2rem;
        flex-direction: row;
      }
    }
  </style>

  <script
    src="https://kit.fontawesome.com/37e149e4dc.js"
    crossorigin="anonymous"></script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const latestBtn = document.getElementById("latest-btn");
      const highlightedBtn = document.getElementById("highlighted-btn");
      const latestSection = document.getElementById("latest-section");
      const highlightedSection = document.getElementById("highlighted-section");

      if (latestBtn && highlightedBtn && latestSection && highlightedSection) {
        latestBtn.addEventListener(
          "click",
          toggleSection.bind(
            null,
            latestBtn,
            highlightedBtn,
            latestSection,
            highlightedSection
          )
        );
        highlightedBtn.addEventListener(
          "click",
          toggleSection.bind(
            null,
            highlightedBtn,
            latestBtn,
            highlightedSection,
            latestSection
          )
        );
      }
    });

    async function toggleSection(
      activeBtn: { classList: { add: (arg0: string) => void } },
      inactiveBtn: { classList: { remove: (arg0: string) => void } },
      activeSection: { classList: { add: (arg0: string) => void } },
      inactiveSection: { classList: { remove: (arg0: string) => void } }
    ) {
      activeBtn.classList.add("active");
      inactiveBtn.classList.remove("active");
      activeSection.classList.add("active");
      inactiveSection.classList.remove("active");
    }

    async function fetchData(
      url: string | URL | Request,
      options: RequestInit | undefined
    ) {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    }

    async function authenticate() {
      const clientId = import.meta.env.PUBLIC_CLIENT_ID;
      const clientSecret = import.meta.env.PUBLIC_CLIENT_SECRET;

      const basicAuth = btoa(`${clientId}:${clientSecret}`);
      const options = {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Authorization: `Basic ${basicAuth}`,
        },
        body: "grant_type=client_credentials",
      };
      const tokenUrl = "https://accounts.spotify.com/api/token";

      const data = await fetchData(tokenUrl, options);
      return data.access_token;
    }

    async function getArtistID(token: any) {
      const artistName = "Gaxve";
      const searchUrl = `https://api.spotify.com/v1/search?q=${encodeURIComponent(artistName)}&type=artist&limit=1`;
      const options = {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      };
      const data = await fetchData(searchUrl, options);
      return data.artists.items[0].id;
    }

    async function getTopTracks(artistID: any, token: any) {
      const topTracksUrl = `https://api.spotify.com/v1/artists/${artistID}/top-tracks?country=US`;
      const options = {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      };
      const data = await fetchData(topTracksUrl, options);
      return data.tracks.slice(0, 3);
    }

    async function getRecentReleases(artistID: any, token: any) {
      const recentReleasesUrl = `https://api.spotify.com/v1/artists/${artistID}/albums?include_groups=album,single&market=US&limit=3`;
      const options = {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      };
      const data = await fetchData(recentReleasesUrl, options);
      return data.items.slice(0, 3);
    }

    async function getTrackInfo(
      trackName: string | number | boolean,
      artistID: any,
      token: any
    ) {
      const searchUrl = `https://api.spotify.com/v1/search?q=${encodeURIComponent(
        trackName
      )}+artist:Gaxve&type=track&limit=1&market=US`;

      const options = {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      };
      try {
        const data = await fetchData(searchUrl, options);
        console.log("API Response:", data);
        const trackInfo = data.tracks.items[0];
        const coverArtUrl = trackInfo.album.images[0].url;
        console.log(coverArtUrl);
        return { ...trackInfo, coverArtUrl };
      } catch (error) {
        console.error("Error fetching track info:", error);
        throw error;
      }
    }

    async function updateCoverArt(coverArtUrl: string): Promise<void> {
      const coverArtImage = document.getElementById(
        "coverArtImage"
      ) as HTMLImageElement;
      if (coverArtImage) {
        coverArtImage.src = coverArtUrl;
      }
    }

    interface Track {
      name: string;
    }

    let currentPlayingTrack: string | null = null;

    async function displayTopTracks(tracks: Track[]): Promise<void> {
      const tracksListHighlighted = document.getElementById(
        "tracksListHighlighted"
      );
      if (!tracksListHighlighted) return;

      tracksListHighlighted.innerHTML = "";

      tracks.forEach((track) => {
        const p = document.createElement("p");
        const span = createClickableSpan(track.name);
        if (currentPlayingTrack === track.name) {
          addPlayIcon(span);
        }
        p.appendChild(span);
        tracksListHighlighted.appendChild(p);
      });
    }

    async function displayRecentReleases(releases: any[]): Promise<void> {
      const tracksListLatest = document.getElementById("tracksListLatest");
      if (!tracksListLatest) return;

      tracksListLatest.innerHTML = "";

      releases.forEach((release) => {
        const p = document.createElement("p");
        const span = createClickableSpan(release.name);
        if (currentPlayingTrack === release.name) {
          addPlayIcon(span);
        }
        p.appendChild(span);
        tracksListLatest.appendChild(p);
      });
    }

    function createClickableSpan(text: string): HTMLSpanElement {
      const span = document.createElement("span");
      span.textContent = "- " + text;
      span.classList.add("clickable");
      span.addEventListener("click", () => playTrack(text));
      return span;
    }

    function addPlayIcon(span: HTMLSpanElement): void {
      const playIcon = document.createElement("i");
      playIcon.classList.add("fa-solid", "fa-play");
      span.insertBefore(playIcon, span.firstChild);
      span.insertBefore(
        document.createTextNode("\u00A0\u00A0"),
        playIcon.nextSibling
      );
    }

    async function playTrack(trackName: string): Promise<void> {
      const audioPlayer = document.getElementById(
        "audioPlayer"
      ) as HTMLAudioElement;

      if (audioPlayer) {
        audioPlayer.volume = 0.3;
      }

      const coverArtImage = document.getElementById(
        "coverArtImage"
      ) as HTMLImageElement;
      if (!audioPlayer || !coverArtImage) return;

      try {
        const token = await authenticate();
        const artistID = await getArtistID(token);
        const trackInfo = await getTrackInfo(trackName, artistID, token);

        if (audioPlayer.src === trackInfo.preview_url) {
          if (audioPlayer.paused) {
            audioPlayer.play();
            currentPlayingTrack = trackName;
          } else {
            audioPlayer.pause();
            currentPlayingTrack = null;
          }
        } else {
          audioPlayer.src = trackInfo.preview_url;
          audioPlayer.play();
          updateCoverArt(trackInfo.coverArtUrl);
          currentPlayingTrack = trackName;
        }

        // Update displayed tracks to show play icon for the currently playing track
        updateDisplay();
      } catch (error) {
        console.error("Error:", error);
      }
    }

    function updateDisplay(): void {
      const tracksListHighlighted = document.getElementById(
        "tracksListHighlighted"
      );
      const tracksListLatest = document.getElementById("tracksListLatest");

      if (tracksListHighlighted) {
        const highlightedTracks =
          tracksListHighlighted.getElementsByTagName("span");
        for (let i = 0; i < highlightedTracks.length; i++) {
          const span = highlightedTracks[i];
          const trackName = span.textContent?.slice(2); // Remove the leading "- "
          if (currentPlayingTrack === trackName) {
            addPlayIcon(span);
          } else {
            removePlayIcon(span);
          }
        }
      }

      if (tracksListLatest) {
        const latestTracks = tracksListLatest.getElementsByTagName("span");
        for (let i = 0; i < latestTracks.length; i++) {
          const span = latestTracks[i];
          const trackName = span.textContent?.slice(2); // Remove the leading "- "
          if (currentPlayingTrack === trackName) {
            addPlayIcon(span);
          } else {
            removePlayIcon(span);
          }
        }
      }
    }

    function removePlayIcon(span: HTMLSpanElement): void {
      const playIcon = span.querySelector(".fa-play");
      if (playIcon) {
        span.removeChild(playIcon);
        span.removeChild(span.childNodes[0]);
      }
    }

    async function getGaxveSongs() {
      try {
        const token = await authenticate();
        const artistID = await getArtistID(token);
        const latestTracks = await getRecentReleases(artistID, token);
        const highlightedTracks = await getTopTracks(artistID, token);
        displayRecentReleases(latestTracks);
        displayTopTracks(highlightedTracks);
      } catch (error) {
        console.error("Error:", error);
      }
    }

    getGaxveSongs();

    const style = document.createElement("style");
    style.textContent = `
  .clickable {
    cursor: pointer;
    position: relative;
  }

  .clickable::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -3px;
    width: 0;
    height: 2px;
    background-color: #76ABAE;
    transition: width 0.3s;
  }

  .clickable:hover::after {
    width: 100%; /* Set width to 100% on hover */
  }
`;
    document.head.appendChild(style);
  </script>
</Layout>
