---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Gaxve Music">
  <main>
    <div class="content">
      <div class="image-container">
        <img src="/media/Background.png" alt="Image" />
      </div>
      <div class="hero-content">
        <nav class="header-navbar">
          <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">News</a></li>
            <li><a href="#">Discography</a></li>
          </ul>
        </nav>
        <div class="music-content">
          <h1>Gaxve</h1>
          <div class="buttons-container">
            <button id="latest-btn" class="active">LATEST</button>
            <button id="highlighted-btn">HIGHLIGHTED</button>
          </div>
          <div class="sections">
            <section id="latest-section" class="music-section active">
              <h2>LATEST SONGS</h2>
              <div id="tracksListLatest"></div>
            </section>
            <section id="highlighted-section" class="music-section">
              <h2>HIGHLIGHTED SONGS</h2>
              <div id="tracksListHighlighted"></div>
            </section>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  /** Main: #FF5B19, Background #161616, Secondaries: #E5E3D2 #AECACD */
  .content {
    display: flex;
    height: 100vh;
  }

  .image-container {
    flex: 0 0 40%;
    max-width: 40%;
    height: 100%;
    overflow: hidden;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hero-content {
    color: #e5e3d2;
    padding: 0;
    position: relative;
    z-index: 1;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  h1 {
    color: #e5e3d2;
    font-size: 8rem;
    font-weight: 500;
    line-height: 1;
    text-align: left;
    margin: 0;
  }

  /* Styling for the header navbar */
  .header-navbar {
    position: sticky;
    top: 0;
    background-color: #161616;
    padding: 2rem;
    padding-inline: 5rem;
    z-index: 2;
    box-shadow: 0px 2px 0px rgba(174, 202, 205, 0.5);
  }

  .header-navbar ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
  }

  .header-navbar ul li {
    margin: 0 10px;
  }

  .header-navbar ul li a {
    text-decoration: none;
    color: #fff;
    font-weight: bold;
  }

  .buttons-container {
    margin-top: 20px;
  }

  .buttons-container button {
    padding: 10px 20px;
    margin-right: 10px;
    border: none;
    background-color: transparent;
    color: #fff;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    text-align: left;
  }

  .buttons-container button::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background-color: #aecacd;
    transition:
      width 0.3s ease,
      left 0.3s ease;
  }

  .buttons-container button.active::after {
    width: calc(100% - 40px);
    left: 20px;
  }

  .sections {
    margin-top: 20px;
    padding: 10px 20px;
  }

  .music-section {
    display: none;
  }

  .music-section.active {
    display: block;
  }

  .music-content {
    padding: 5rem;
  }
</style>

<script src="https://kit.fontawesome.com/37e149e4dc.js" crossorigin="anonymous"
></script>

<script>
  const CLIENT_ID = import.meta.env.PUBLIC_CLIENT_ID;
  const CLIENT_SECRET = import.meta.env.PUBLIC_CLIENT_SECRET;

  document.addEventListener("DOMContentLoaded", function () {
    const latestBtn = document.getElementById("latest-btn");
    const highlightedBtn = document.getElementById("highlighted-btn");
    const latestSection = document.getElementById("latest-section");
    const highlightedSection = document.getElementById("highlighted-section");

    if (latestBtn && highlightedBtn && latestSection && highlightedSection) {
      latestBtn.addEventListener("click", function () {
        latestBtn.classList.add("active");
        highlightedBtn.classList.remove("active");
        latestSection.classList.add("active");
        highlightedSection.classList.remove("active");
      });

      highlightedBtn.addEventListener("click", function () {
        highlightedBtn.classList.add("active");
        latestBtn.classList.remove("active");
        highlightedSection.classList.add("active");
        latestSection.classList.remove("active");
      });
    }
  });

  // Function to fetch data from Spotify API
  async function fetchData(url: string, options: RequestInit): Promise<any> {
    const response = await fetch(url, options);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  }

  // Function to authenticate with Spotify API and get access token
  async function authenticate(): Promise<string> {
    const clientId = CLIENT_ID;
    const clientSecret = CLIENT_SECRET;

    const basicAuth = btoa(`${clientId}:${clientSecret}`);
    const options: RequestInit = {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        Authorization: `Basic ${basicAuth}`,
      },
      body: "grant_type=client_credentials",
    };
    const tokenUrl = "https://accounts.spotify.com/api/token";

    const data = await fetchData(tokenUrl, options);
    return data.access_token;
  }

  // Function to retrieve Gaxve's artist ID
  async function getArtistID(token: string): Promise<string> {
    const artistName = "Gaxve";
    const searchUrl = `https://api.spotify.com/v1/search?q=${encodeURIComponent(artistName)}&type=artist&limit=1`;
    const options: RequestInit = {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };
    const data = await fetchData(searchUrl, options);
    return data.artists.items[0].id;
  }

  // Function to retrieve Gaxve's top tracks
  async function getTopTracks(artistID: string, token: string): Promise<any[]> {
    const topTracksUrl = `https://api.spotify.com/v1/artists/${artistID}/top-tracks?country=US`;
    const options: RequestInit = {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };
    const data = await fetchData(topTracksUrl, options);
    return data.tracks.slice(0, 4);
  }

  // Function to retrieve Gaxve's recent releases
  async function getRecentReleases(
    artistID: string,
    token: string
  ): Promise<any[]> {
    const recentReleasesUrl = `https://api.spotify.com/v1/artists/${artistID}/albums?include_groups=album,single&market=US&limit=4`;
    const options: RequestInit = {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };
    const data = await fetchData(recentReleasesUrl, options);
    return data.items.slice(0, 4);
  }

  // Add type definitions for track
  interface Track {
    name: string;
  }

  const style = document.createElement("style");
  style.textContent = `
  .clickable {
    cursor: pointer;
    position: relative;
  }

  .clickable::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -3px; /* Adjust this value to change the distance of the underline from the text */
    width: 0; /* Set initial width to 0 */
    height: 2px; /* Adjust this value to change the thickness of the underline */
    background-color: #aecacd; /* Underline color */
    transition: width 0.3s; /* Add transition effect to width changes */
  }

  .clickable:hover::after {
    width: 100%; /* Set width to 100% on hover */
  }
`;
  document.head.appendChild(style);

  // Main function to retrieve and display Gaxve's top tracks
  async function getGaxveTopTracks(): Promise<void> {
    try {
      const token = await authenticate();
      const artistID = await getArtistID(token);
      const topTracks = await getTopTracks(artistID, token);
      displayTopTracks(topTracks);
    } catch (error) {
      console.error("Error:", error);
    }
  }

  // Main function to retrieve and display Gaxve's recent releases
  async function getGaxveRecentReleases(): Promise<void> {
    try {
      const token = await authenticate();
      const artistID = await getArtistID(token);
      const recentReleases = await getRecentReleases(artistID, token);
      displayRecentReleases(recentReleases);
    } catch (error) {
      console.error("Error:", error);
    }
  }

  // Function to display top tracks
  function displayTopTracks(tracks: Track[]): void {
    const tracksListHighlighted = document.getElementById(
      "tracksListHighlighted"
    );
    if (!tracksListHighlighted) return;

    tracksListHighlighted.innerHTML = "";

    let prevClickedSpan: HTMLSpanElement | null = null;

    tracks.forEach((track) => {
      const p = document.createElement("p");
      const span = document.createElement("span");
      const playIcon = document.createElement("i");
      playIcon.classList.add("fa-solid", "fa-play");

      span.textContent = "- " + track.name;

      // Inside the click event listener for the span element
      span.addEventListener("click", () => {
        const hasPlayIcon = span.contains(playIcon);

        // Remove the play icon and the space from the span
        if (prevClickedSpan && prevClickedSpan !== span) {
          const prevPlayIcon = prevClickedSpan.querySelector(".fa-play");
          if (prevPlayIcon) {
            prevClickedSpan.removeChild(prevPlayIcon);
            prevClickedSpan.removeChild(prevClickedSpan.childNodes[0]); // Remove the space
          }
        }

        // Toggle the play icon for the clicked song
        if (hasPlayIcon) {
          // If the play icon exists, remove it and the space
          span.removeChild(playIcon);
          span.removeChild(span.childNodes[0]); // Remove the space
        } else {
          // If the play icon doesn't exist, add it along with the space
          span.insertBefore(playIcon, span.firstChild);
          span.insertBefore(
            document.createTextNode("\u00A0\u00A0"),
            playIcon.nextSibling
          );
        }

        // Update the prevClickedSpan to the clicked span
        prevClickedSpan = span;
      });

      span.classList.add("clickable");

      p.appendChild(span);
      tracksListHighlighted.appendChild(p);
    });
  }

  // Function to display recent releases
  function displayRecentReleases(releases: any[]): void {
    const tracksListLatest = document.getElementById("tracksListLatest");
    if (!tracksListLatest) return;

    tracksListLatest.innerHTML = "";

    let prevClickedSpan: HTMLSpanElement | null = null;

    releases.forEach((release) => {
      const p = document.createElement("p");
      const span = document.createElement("span");
      const playIcon = document.createElement("i");
      playIcon.classList.add("fa-solid", "fa-play");

      span.textContent = "- " + release.name;

      span.addEventListener("click", () => {
        const hasPlayIcon = span.contains(playIcon);

        // Remove the play icon and the space from the prevClickedSpan, if any
        if (prevClickedSpan && prevClickedSpan !== span) {
          const prevPlayIcon = prevClickedSpan.querySelector(".fa-play");
          if (prevPlayIcon) {
            prevClickedSpan.removeChild(prevPlayIcon);
            prevClickedSpan.removeChild(prevClickedSpan.childNodes[0]); // Remove the space
          }
        }

        // Toggle the play icon for the clicked song
        if (hasPlayIcon) {
          // If the play icon exists, remove it and the space
          span.removeChild(playIcon);
          span.removeChild(span.childNodes[0]); // Remove the space
        } else {
          // If the play icon doesn't exist, add it along with the space
          span.insertBefore(playIcon, span.firstChild);
          span.insertBefore(
            document.createTextNode("\u00A0\u00A0"),
            playIcon.nextSibling
          );
        }

        // Update the prevClickedSpan to the clicked span
        prevClickedSpan = span;
      });

      span.classList.add("clickable");

      p.appendChild(span);
      tracksListLatest.appendChild(p);
    });
  }

  getGaxveRecentReleases();
  getGaxveTopTracks();
</script>
